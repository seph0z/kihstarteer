// <auto-generated />
using System;
using Kehstartir.Data.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Kehstartir.Data.EntityFramework.Migrations
{
    [DbContext(typeof(EntitiesContext))]
    [Migration("20190709202205_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Bonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Bonuses");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.BonusAspNetUsers", b =>
                {
                    b.Property<int>("BonusId");

                    b.Property<string>("UserId");

                    b.HasKey("BonusId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BonusAspNetUsers");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.BonusCompany", b =>
                {
                    b.Property<int>("BonusId");

                    b.Property<int>("CompanyId");

                    b.HasKey("BonusId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("BonusCompanies");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("Created");

                    b.Property<string>("Text");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Theme");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.Property<string>("VideoLink");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.CompanyTag", b =>
                {
                    b.Property<int>("CompanyId");

                    b.Property<int>("TagId");

                    b.HasKey("CompanyId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("CompanyTags");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("ImagePath");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId");

                    b.Property<int>("Down");

                    b.Property<int>("Up");

                    b.HasKey("Id");

                    b.HasIndex("CommentId")
                        .IsUnique();

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.LikeAspNetUsers", b =>
                {
                    b.Property<int>("LikeId");

                    b.Property<string>("UserId");

                    b.HasKey("LikeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("LikeAspNetUsers");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Content");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<int>("Count");

                    b.Property<double>("Sum");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.RatingAspNetUsers", b =>
                {
                    b.Property<int>("RatingId");

                    b.Property<string>("UserId");

                    b.HasKey("RatingId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingAspNetUsers");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetRoleClaims", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserClaims", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserLogins", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserRoles", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.AspNetUserTokens", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.BonusAspNetUsers", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Bonus", "Bonus")
                        .WithMany("BonusAspNetUsers")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("BonusAspNetUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.BonusCompany", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Bonus", "Bonus")
                        .WithMany("BonusCompanies")
                        .HasForeignKey("BonusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.Company", "Company")
                        .WithMany("BonusCompanies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Comment", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Company", "Company")
                        .WithMany("Comments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Company", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.CompanyTag", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Company", "Company")
                        .WithMany("CompanyTags")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.Tag", "Tag")
                        .WithMany("CompanyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Image", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Company", "Company")
                        .WithMany("Images")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Like", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Comment", "Comment")
                        .WithOne("Like")
                        .HasForeignKey("Kehstartir.Data.Contracts.Entities.Like", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.LikeAspNetUsers", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Like", "Like")
                        .WithMany("LikeAspNetUsers")
                        .HasForeignKey("LikeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("LikeAspNetUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Post", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Company", "Company")
                        .WithMany("Posts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Profile", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Kehstartir.Data.Contracts.Entities.Profile", "UserId");
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.Rating", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Company", "Company")
                        .WithOne("Rating")
                        .HasForeignKey("Kehstartir.Data.Contracts.Entities.Rating", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Kehstartir.Data.Contracts.Entities.RatingAspNetUsers", b =>
                {
                    b.HasOne("Kehstartir.Data.Contracts.Entities.Rating", "Rating")
                        .WithMany("RatingAspNetUsers")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Kehstartir.Data.Contracts.Entities.AspNetUsers", "User")
                        .WithMany("RatingAspNetUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
